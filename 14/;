function loadPuzzle()
    io.input("test_input.txt")
    local puzzle = {}
    for line in io.lines() do
        local row = {}
        for c in line:gmatch(".") do
            table.insert(row, c)
        end
        table.insert(puzzle, row)
    end
    return puzzle
end

function translateColumn(puzzle, column)
    local translation = {}
    for i = #puzzle, 1, -1 do
        table.insert(translation, puzzle[i][column])
    end
    return translation
end

function rotate(puzzle)
    local t = {}
    local n = #puzzle
    local m = #puzzle[1]

    for i = 1, m do
        t[i] = {}
        for j = 1, n do
            t[i][j] = puzzle[n - j + 1][i]
        end
    end
    return t
end

function tiltNorth(puzzle)
    for i = 1, #puzzle[1] do -- Iterating over each column
        local column = translateColumn(puzzle, i)
        local lastValid = #column

        for j = #column, 1, -1 do
            if column[j] == "O" then
                -- Move "O" upwards in the column
                column[j] = "."
                column[lastValid] = "O"
                lastValid = lastValid - 1
            elseif column[j] == "#" then
                lastValid = j - 1
            end
        end


        -- Apply the updated column back to the puzzle grid
        for j = 1, #column do
            puzzle[#puzzle - j + 1][i] = column[j]
        end
    end
    return puzzle
end

function inTable(t, e)
    for i = 1, #t do
        if t[i] == e then
            return true
        end
    end
    return false
end

function puzzleToString(puzzle)
    local s = ""
    for i = 1, #puzzle do
        for j = 1, #puzzle[i] do
            s = s .. puzzle[i][j]
        end
    end
    return s
end

function stringToPuzzle(s, rowLength)
    local puzzle = {}
    local row = {}

    for i = 1, #s do
        table.insert(row, s:sub(i, i))
        if i % rowLength == 0 then
            table.insert(puzzle, row)
            row = {}
        end
    end
    -- Handle any remaining elements in the last row
    if #row > 0 then
        table.insert(puzzle, row)
    end

    return puzzle
end

function printPuzzle(puzzle)
    for i = 1, #puzzle do
        for j = 1, #puzzle[i] do
            io.write(puzzle[i][j])
        end
        io.write("\n")
    end
end

function getSum(column)
    -- print(table.concat(column))
    local sum = 0
    for i = #column, 1, -1 do
        if column[i] == "O" then
            sum = sum + i
        end
    end
    return sum
end

function puzLoad(puzStr, length)
    p = stringToPuzzle(puzStr, length)
    local sum = 0
    for i = #p[1], 1, -1 do
        local column = translateColumn(p, i)
        sum = sum + getSum(column)
    end

    return sum
end

function getLoopStartIndex(cache, puzStr)
    for i = 1, #cache do
        if cache[i] == puzStr then
            return i
        end
    end
end

function loadCycle(cache, startIndex)
    local cycle = {}
    for i = startIndex, #cache do
        table.insert(cycle, cache[i])
    end
    return cycle
end

function solve(puzzle)
    local cache = {}
    local cycle = {}
    local remainder = 0
    local puzStr = ""

    -- table.insert(cache, puzzleToString(puzzle))
    -- printPuzzle(puzzle)
    for i = 1, 1000000000 do
        for j = 1, 4 do
            puzzle = tiltNorth(puzzle)
            puzzle = rotate(puzzle)
        end
        puzStr = puzzleToString(puzzle)
        if inTable(cache, puzStr) then
            loopStartIndex = getLoopStartIndex(cache, puzStr)
            loopLength = i - loopStartIndex
            remainingCycles = 1000000000 - i
            indexInLoop = (remainingCycles % (loopLength))
            cycle = loadCycle(cache, loopStartIndex)
            print("Loop start index: " .. loopStartIndex)
            print("index in loop: " .. indexInLoop)
            print(puzLoad(cycle[indexInLoop + 1], #puzzle[1]))

            goto done
        end

        -- 1, 2, 3, ... 4, 5, 6, 7, 8, 9, 10, 11, 12,  ...
        cache[i] = puzStr
    end
    ::done::
end

solve(loadPuzzle())
